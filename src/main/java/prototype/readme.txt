原型模式
    用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。
    原型模式是从一个对象出发得到若干和自己有相同状态的新对象的成熟模式
    该模式的关键是将一个对象定义为原型，并为其提供复制（克隆）自己的方法。
注意问题：
    1、java.lang.Object.clone方法可以复制对象，但被复制的对象必须重写该方法，并且实现Cloneable接口。
    2、深度克隆问题：如果被克隆的对象存在对象组件，那么直接使用clone方法后，原对象与复制对象拥有的组件对象的地址是一样的。
    需要组件对象也实现clone方法，在元对象的clone方法中复制后赋值给复制对象中的对象组件变量。
    3、使用Serializable接口序列化对象后，以反序列化的形式复制对象。但要求序列化对象的组件对象也是可序列化的。
优缺点：
    1、当创建类的新实例代价更大时，使用原型模式复制一个已有的实例可以提高创建新实例的效率。
    2、可以动态的保存当前对象的状态，在运行时可以随时使用对象流保存当前对象的一个复制品。
    3、可以在运行时创建新的对象，而无需创建一系列类和继承关系。
    4、可以动态添加、删除原型的复制品。
模式角色：
    1、抽象原型：一个接口，负责定义对象复制自身的方法
    2、具体原型：实现prototype接口的类，具体原型实现抽象原型中的方法以便所创建的对象调用该方法复制自己。
使用场景：
    1、程序需要从一个对象出发，得到若干个和其状态相同，并可独立变化其状态的对象时。
    2、当对象的创建需要独立于他的构造过程和表示时。
    3、一个类创建实例状态不是很多，那么就可以将这个类的一个实例定义为原型，那么通过复制该原型得到新的实例可能比重新使用类的构造方法创建新实例更方便。