外观模式
    为系统中的一组接口提供一个一直的界面。
    facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
    外观模式的关键是为子系统提供一个称作外观的类，该外观类的实例负责和子系统中类的实例交互。
    即外观类中封装了子系统中各类的实例变量。用户只需要知道如何使用外观类的功能，而不需要知道都由哪些子系统的类实现。
优缺点：
    1、使客户和子系统中的类无耦合，且使子系统更易用。
    2、外观只是提供了一个更简洁的界面，不影响用户直接使用子系统中的类。
    3、子系统中任何类对其方法的修改，不影响外观类的代码。
模式角色:
    1、子系统：子系统是若干个类的集合，这些类的实例协同合作为用户提供所需的功能。
    2、外观：外观是一个类，该类包含子系统中全部或部分类的实例引用，当用户想要与子系统交互时，可以代替的和外观类的实例交互。
使用场景：
    1、为一个复杂的模块或子系统提供一个供外界访问的简单接口。
    2、子系统相对独立，外界对子系统的访问只要黑箱操作即可。
    3、防止代码修改带来的风险扩散，控制风险范围。