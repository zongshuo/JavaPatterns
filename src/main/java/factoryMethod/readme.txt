工厂方法模式（虚拟构造模式）
    工厂模式可以分为简单工厂模式和工厂方法模式。两种模式都可以避免用户创建对象造成耦合。
    如果创建的产品不多，只要一个工厂类就可以完成，这种模式叫做简单工厂模式。
    简单工厂模式有一个缺点，当新增或删除产品时需要修改工厂类，违背开闭原则。
    对简单工厂模式的进一步抽象，就是工厂方法模式。
    增加了构造者抽象，并将原工厂类拆分为多个实现类构造者抽象的具体构造者。
    相比于简单工厂模式，工厂方法模式还可以对不同类型的产品进行不同的初始化。
    当客户端需求变化，需要增加和删除产品时服务端可以不修改代码。
    通过两次向上转型，彻底将服务端与客户端的对象解耦。
模式角色：
    1、抽象产品：负责定义产品必须实现的方法，可以是抽象类或者接口
    2、具体产品：抽象产品的具体实现。
    3、构造者：负责定义一个返回具体产品实例的抽象方法，可以是接口或者抽象类。
    4、具体构造者：构造者的具体实现，具体实现构造者的工厂方法。返回具体产品的实例。
使用场景：
    1、相同产品等级的产品不断增加新产品产生需求变化的场景。
    如：生产冰箱类，可以生产美的冰箱、格力冰箱、海尔冰箱
        生产牧场类，可以是养马场、养牛场等
        生产西装类：可以是北京的厂、广州的厂、上海的厂等。
    2、多种策略之间经常进行变更的场景
        如：Java集合框架的迭代器iterator
        迭代器是一个构造者，集合中各种返回迭代器的方法都是具体构造者。
        集合是一个抽象产品，各种集合是具体产品。

