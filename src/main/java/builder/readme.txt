生成器模式
    将一个复杂的对象的构建与它的表示分离，使同样的构建过程可以创建不同的表示。
    习惯上把一个对象内的成员对象称作对象的组件。
    对于一个有很多成员对象的对象，很难通过构造方法将所有成员对象都按要求构造出来。
    当系统准备为用户提供一个内部结构负责的对象时，就可以使用生成器模式。
    该模式可以逐步的构造对象，是对象的创建更有弹性。模式的关键是将一个含有多个组件的对象的创建分成若干个步骤，并将这些步骤封装在一个称作生成器的接口中。
优缺点：
    1、生成器模式将对象的具体构造过程封装在具体生成器中，用户使用不同的具体生成器就可以获取对象的不同表示。
    2、生成器模式将对象的构造过程从创建该对象的类中分离出来，使用户无需了解该对象的具体组件。
    3、可以更加精细有效的控制对象的构造过程。生成器将对象的构造过程分解成若干步骤，这就使程序可以更加精细，有效的控制整个对象的构造。
    4、生成器模式将对象的构造过程与创建该对象的类解耦，使对象的创建更加灵活有弹性。
    5、当增加新的具体生成器时，不必修改指挥者的代码，该模式满足开闭原则。
模式角色：
    1、产品：具体生成器要构造的复杂对象。
    2、抽象生成器：抽象生成器是一个接口，该接口除了为创建一个product对象的各个组件定义了若干个方法外，还要定义返回product对象的方法。
    3、具体生成器：实现builder接口的类，具体生成器将实现抽象生成器所定义的方法。
    4、指挥者：指挥者是一个类，该类需要含有builder接口声明的变量。
    指挥者的职责是负责向用户提供具体生成器，即指挥者将请求具体生成器来构造用户所需的产品对象，
    如果所请求的具体生成器成功的构造出产品对象，指挥者就可以让该具体生成器返回所构造的产品对象。
使用场景：
    1、当系统准备为用户提供一个内部结构复杂的对象，而且在构造方法中编写创建
    该对象的代码无法满足用户需求时，就可以使用生成器模式来构造这样的对象。
    2、当某些系统要求对象的构造过程必须独立于创建该对象的类时。